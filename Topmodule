////////////////////////////////////////////////////////////////  topmodule  /////////////////////////////////////////////////////////////////////////////////////////////



******************************************************************* RTL ********************************************************************************************



module router_top(clk,rstn,read_enb_0,read_enb_1,read_enb_2,data_in,pkt_valid,data_out_0,data_out_1,data_out_2,valid_out_0,valid_out_1,valid_out_2,error,busy);
input clk,rstn,read_enb_0,read_enb_1,read_enb_2,pkt_valid;
input [7:0]data_in;
output [7:0]data_out_0,data_out_1,data_out_2;
output valid_out_0,valid_out_1,valid_out_2,error,busy;
wire parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2,busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state;
wire [7:0]dout;
wire [2:0]write_enb;


router_fsm a1(clk,rstn,pkt_valid,parity_done,data_in[1:0],soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2,busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state);

router_sync a2(clk,rstn,detect_add,data_in[1:0],write_enb_reg,read_enb_0,read_enb_1,read_enb_2,full_0,full_1,full_2,fifo_empty_0,fifo_empty_1,fifo_empty_2,soft_reset_0,soft_reset_1,soft_reset_2,write_enb,fifo_full,valid_out_0,valid_out_1,valid_out_2);

router_reg a3(clk,rstn,pkt_valid,data_in,fifo_full,rst_int_reg,detect_add,ld_state,laf_state,full_state,lfd_state,parity_done,low_pkt_valid,error,dout);

fifo f1(clk,rstn,write_enb[0],soft_reset_0,read_enb_0,dout,lfd_state,data_out_0,fifo_empty_0,full_0);
fifo f2(clk,rstn,write_enb[1],soft_reset_1,read_enb_1,dout,lfd_state,data_out_1,fifo_empty_1,full_1);
fifo f3(clk,rstn,write_enb[2],soft_reset_1,read_enb_2,dout,lfd_state,data_out_2,fifo_empty_2,full_2);

endmodule






*********************************************************************** TB ********************************************************************************



module router_top_tb();

reg clk,rstn,read_enb_0,read_enb_1,read_enb_2,pkt_valid;
reg [7:0]data_in;
wire [7:0]data_out_0,data_out_1,data_out_2;
wire valid_out_0,valid_out_1,valid_out_2,error,busy;

router_top dut(clk,rstn,read_enb_0,read_enb_1,read_enb_2,data_in,pkt_valid,data_out_0,data_out_1,data_out_2,valid_out_0,valid_out_1,valid_out_2,error,busy);

initial
begin
	clk=1'b0;
	forever #5 clk=~clk;
end
task reset;
	begin
		@(negedge clk)
		rstn=0;
		@(negedge clk)
		rstn=1;
	end
endtask

task initialize;
	begin
		rstn=1'b1;
		{ clk,rstn,read_enb_0,read_enb_1,read_enb_2,pkt_valid,data_in}=0;
	end
endtask


task write;
	reg [7:0]payload_data,parity,header;
	reg [5:0]payload_length;
	reg [1:0]addr;
	integer k;
	begin
	@(negedge clk)
	begin
	pkt_valid=1'b1;
	addr=2'b01;
	payload_length=6'd14;
	header={payload_length,addr};
	data_in=header;
	end
	for(k=0;k<payload_length;k=k+1)
	begin
		@(negedge clk)
		begin
		payload_data={$random}%256;
		data_in =payload_data;
        	end
	end
	@(negedge clk)
	begin
		pkt_valid=1'b0;
		parity ={$random}%256;
		data_in=parity;
	end
end
endtask
task read;
begin
	@(negedge clk)
	read_enb_0=1;
end
endtask

initial
begin
	initialize;
	reset;
	write;
	#10;
	read;
end
endmodule
