///////////////////////////////////////////////////////////////////////// fifo  /////////////////////////////////////////////////////////////////////////////////////////////////

***************************************************************************  RTL *************************************************************************************************


module fifo(clk,rstn,write_enb,soft_reset,read_enb,data_in,lfd_state,data_out,empty,full);
input clk,rstn,write_enb,soft_reset,read_enb;
input [7:0]data_in;
input lfd_state;
output empty,full;
output reg [7:0]data_out;

reg [4:0]w_ptr;
reg [4:0]r_ptr;
reg [8:0]meomery[0:15];
reg [6:0]fifo_count;
reg lfd_state_s;
integer i;

always@(posedge clk)
begin
	if(!rstn)
		lfd_state_s<=1'b0;
	else
		lfd_state_s<=lfd_state;
end

always@(posedge clk)
begin
	if(!rstn)
		{w_ptr,r_ptr}<=0;
	else if(soft_reset)
			{w_ptr,r_ptr}<=0;
		else if (write_enb && !full)
			begin
			w_ptr<=w_ptr+1'b1;
			
			end
		else if (read_enb && !empty)
		begin
			r_ptr<=r_ptr+1'b1;
			
			end
		else 
		data_out<=data_out;
	
end
always@(posedge clk)
begin
	if(!rstn)
	begin
		for(i=0;i<16;i=i+1)
			meomery[i]<=0;
	end
	else if(soft_reset)
	begin
		for(i=0;i<16;i=i+1)
			meomery[i] <= 0;
	end
	else if(write_enb  && !full )
	begin	
	meomery[w_ptr[3:0]] <= {lfd_state_s,data_in};
				//$display("%b",r_ptr);
	end
	else
		data_out<=data_out;
end

always@(posedge clk)
begin
	if(!rstn)
	begin
		fifo_count<=0;
	end
	else if(soft_reset)
		fifo_count<=0;
	else if(read_enb && !empty)
	begin
		if(meomery[r_ptr[3:0]][8]==1)
			fifo_count<=meomery[r_ptr][7:2]+1'b1;
		else if(fifo_count !=0)
			fifo_count<= fifo_count-1'b1;
		//else
		//	data_out<=data_out;
	end
end
always@(posedge clk)
begin
	if(!rstn)
	begin
		data_out<=8'b0;
	end
	else if(soft_reset)
		data_out<=8'bz;
	else if(read_enb && !empty)
		data_out<=meomery[r_ptr[3:0]];
	else if(fifo_count==0 && data_out!=0) 
		data_out<=8'bz;
	//else
		//data_out<=data_out;
end
assign full=(w_ptr[3:0]==r_ptr[3:0] && w_ptr[4]==~r_ptr[4])?1'b1:1'b0;
assign empty=(w_ptr==r_ptr)?1'b1:1'b0;
endmodule






*****************************************************************************************TB************************************************************************


module fifotb();
reg clk,rstn,write_enb,soft_reset,read_enb,lfd_state;
reg [7:0]data_in;
wire [7:0]data_out;
wire empty,full;
fifo dut(clk,rstn,write_enb,soft_reset,read_enb,data_in,lfd_state,data_out,empty,full);
initial
begin
	clk=1'b0;
	forever #5 clk=~clk;
end
task initialize;
	begin
 	rstn=1;
	{write_enb,soft_reset,read_enb,lfd_state,data_in}=0;
 end
endtask

task reset;
	begin
		@(negedge clk)
		rstn=0;
		@(negedge clk)
		rstn=1;
	end
endtask

task sreset;
	begin
		@(negedge clk)
		soft_reset=1;
		@(negedge clk)
		soft_reset=0;
	end
endtask


task write;
	reg [7:0]payload_data,parity,header;
	reg [5:0]payload_length;
	reg [1:0]addr;
	integer k;
	begin
	@(negedge clk)
	lfd_state=1'b1;
	@(negedge clk)
	begin
	addr=2'b01;
	payload_length=6'd14;
	header={payload_length,addr};
	data_in=header;
	lfd_state=1'b0;
	write_enb=1;
	end
	for(k=0;k<payload_length;k=k+1)
	begin
		@(negedge clk)
		begin
		payload_data={$random}%256;
		data_in =payload_data;
        	end
	end
	@(negedge clk)
	begin
		parity ={$random}%256;
		data_in=parity;
	end
	@(negedge clk)
	write_enb=1'b0;
end
endtask
task read;

	integer i;
	begin
	for(i=0;i<16;i=i+1)
	begin
		@(negedge clk)
		read_enb=1;

	end
	read_enb=0;
end
endtask
initial 
begin
	initialize;
	reset;
	sreset;
	write;
	#10;
	read;
end
endmodule
